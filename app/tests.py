import hashlib
import json
import math
from pathlib import Path

import pytest

from overpass import OverpassClient, tile_bbox_from_x_y


class TestGeoJSON:
    @pytest.fixture
    def overpass_client(self):
        return OverpassClient(
            "https://overpass.kumi.systems/api/interpreter/",
            "Overscape/0.1",
            cache_dir=Path("_test_cache"),
            cache_days=7,
            cache_size=1e5,
        )

    def soundscape_geojson(self, x, y, overpass_client):
        # Outside of tests, we cache our transformed GeoJSON, but since
        # we want to test the transformation, we only cache the response
        # from Overpass.
        coords = tile_bbox_from_x_y(x, y)
        q = overpass_client._build_query(*coords)
        overpass_json = overpass_client.cache.get(
            hashlib.sha256(q.encode("utf-8")).hexdigest(),
            lambda: overpass_client._execute_query(q),
        )
        return overpass_client.overpass_to_soundscape_geojson(overpass_json)

    @pytest.mark.parametrize(
        "x,y",
        [
            [18741, 25054],
            [18747, 25074],
            [18751, 25065],
        ],
    )
    def test_geojson_schema(self, x, y, overpass_client):
        """Check that we match the Soundscape GeoJSON format described at
        https://github.com/steinbro/soundscape/blob/main/docs/services/data-plane-schema.md

        This might be checkable with jsonschema validation.
        """
        json_data = self.soundscape_geojson(x, y, overpass_client)

        assert len(json_data.keys()) == 2
        assert json_data["type"] == "FeatureCollection"
        assert len(json_data["features"]) > 0
        for feature in json_data["features"]:
            assert "feature_type" in feature
            assert "feature_value" in feature
            assert "geometry" in feature
            assert "osm_ids" in feature
            assert "properties" in feature
            assert "type" in feature

            assert "coordinates" in feature["geometry"]
            assert "type" in feature["geometry"]

    def find_features_by_attrs(attrs, geojson):
        for n in geojson["features"]:
            if any(n[k] != v for (k, v) in attrs.items()):
                continue
            yield n

    def compare_features(a, b):
        for key in ("feature_type", "feature_value", "osm_ids", "properties"):
            assert a[key] == b[key]
        assert a["geometry"]["type"] == b["geometry"]["type"]
        for a_val, b_val in zip(
            a["geometry"]["coordinates"], b["geometry"]["coordinates"]
        ):
            assert math.isclose(a_val, b_val, rel_tol=1e-7)

    @pytest.mark.parametrize(
        "feature_type,feature_value",
        [
            # ['amenity', 'post_office'],
            # ["building", "yes"],
            ["highway", "bus_stop"],
            # ["highway", "primary"],
            ["historic", "memorial"],
            ["office", "insurance"],
        ],
    )
    @pytest.mark.parametrize(
        "x,y",
        [
            [18741, 25054],
            [18747, 25074],
            [18751, 25065],
        ],
    )
    def test_geojson_compare(self, x, y, feature_type, feature_value, overpass_client):
        """Test against some sample JSON responses generated by the origianl
        Soundscape tile server.
        """
        our_geojson = self.soundscape_geojson(x, y, overpass_client)

        with open(f"../test_reference/{x}_{y}.json") as f:
            reference_geojson = json.load(f)

        reference_nodes = list(
            TestGeoJSON.find_features_by_attrs(
                {"feature_type": feature_type, "feature_value": feature_value},
                reference_geojson,
            )
        )
        if len(reference_nodes) == 0:
            return pytest.skip(
                f'no "{feature_type}": "{feature_value}" in {x}_{y}.json'
            )

        for reference_node in reference_nodes:
            our_node = list(
                TestGeoJSON.find_features_by_attrs(
                    {"osm_ids": reference_node["osm_ids"]}, our_geojson
                )
            )
            if len(our_node) == 1:
                TestGeoJSON.compare_features(reference_node, our_node[0])
            else:
                pytest.fail(
                    f"{len(our_node)} nodes with osm_id {reference_node['osm_ids']}"
                )
